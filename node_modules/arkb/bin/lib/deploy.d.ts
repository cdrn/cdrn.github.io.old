import Blockweave from 'blockweave';
import { TxDetail } from '../faces/txDetail';
import { FileBundle } from 'arbundles/file';
import Bundler from '../utils/bundler';
import Tags from '../lib/tags';
import { JWKInterface } from 'blockweave/dist/faces/lib/wallet';
import Transaction from 'blockweave/dist/lib/transaction';
export default class Deploy {
    readonly debug: boolean;
    readonly threads: number;
    readonly logs: boolean;
    readonly localBundle: boolean;
    private wallet;
    private blockweave;
    private arweave;
    private bundler;
    private ipfs;
    private cache;
    private txs;
    private duplicates;
    private community;
    private bundle;
    private bundledTx;
    constructor(wallet: JWKInterface, blockweave: Blockweave, debug?: boolean, threads?: number, logs?: boolean, localBundle?: boolean);
    getBundler(): Bundler;
    getBundle(): FileBundle;
    getBundledTx(): Transaction;
    prepare(dir: string, files: string[], index?: string, tags?: Tags, toIpfs?: boolean, license?: string, useBundler?: string, feeMultiplier?: number, forceRedeploy?: boolean, colors?: boolean): Promise<TxDetail[]>;
    deploy(isFile?: boolean, useBundler?: string, colors?: boolean): Promise<string>;
    private buildTransaction;
    private buildManifest;
    private toHash;
}
