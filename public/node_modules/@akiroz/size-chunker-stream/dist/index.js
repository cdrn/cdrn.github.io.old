"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var stream_1 = require("stream");
var SizeChunker = /** @class */ (function (_super) {
    __extends(SizeChunker, _super);
    function SizeChunker(_a) {
        var chunkSize = _a.chunkSize;
        var _this = _super.call(this) || this;
        _this.fill = 0;
        _this.chunks = [];
        _this.chunkSize = chunkSize;
        return _this;
    }
    SizeChunker.prototype._transform = function (chunk, encoding, callback) {
        if (!Buffer.isBuffer(chunk)) {
            callback(Error("Received non-buffer chunk"));
            return;
        }
        this.fill += chunk.length;
        this.chunks.push(chunk);
        while (this.fill >= this.chunkSize) {
            this.push(Buffer.concat(this.chunks, this.chunkSize));
            var lastChunk = this.chunks[this.chunks.length - 1];
            var residue = this.fill - this.chunkSize;
            this.chunks = residue === 0 ? [] : [Buffer.from(lastChunk.slice(lastChunk.length - residue))];
            this.fill = residue;
        }
        callback();
    };
    return SizeChunker;
}(stream_1.Transform));
exports["default"] = SizeChunker;
